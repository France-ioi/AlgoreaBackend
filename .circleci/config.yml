version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.0
jobs:
  deps:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - restore_cache: &CACHEKEYMOD
          key: go-deps-modules-@{{ checksum "go.sum" }}
      - run: make
      - persist_to_workspace:
          root: ./
          paths:
            - "*"
      - save_cache:
          <<: *CACHEKEYMOD
          paths:
          - /go/pkg/mod
          - ~/.cache/go-build/
  tests:
    docker:
      - image: circleci/golang:1.13
      - image: circleci/mysql:8.0.18
        command: --default-authentication-plugin=mysql_native_password --max-allowed-packet=10485760
        environment:
          MYSQL_USER: algorea
          MYSQL_PASSWORD: dummy_password
          MYSQL_DATABASE: ci_db
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ROOT_HOST: "%"
    environment:
      ALGOREA_ENV: test
      ALGOREA_DATABASE__CONNECTION__ADDR: 127.0.0.1
      ALGOREA_DATABASE__CONNECTION__USER: algorea
      ALGOREA_DATABASE__CONNECTION__PASSWD: dummy_password
      ALGOREA_DATABASE__CONNECTION__DBNAME: ci_db
      ALGOREA_LOGGING__FORMAT: json
      ALGOREA_LOGGING__OUTPUT: file
      ALGOREA_LOGGING__LOGSQLQUERIES: 1
      ALGOREA_LOGGING__LEVEL: debug
    steps:
      - attach_workspace:
          at: ./
      - restore_cache: *CACHEKEYMOD
      - run: sudo apt-get update
      - run: sudo apt-get install default-mysql-client             # required for db-restore
      - run: cp conf/config.sample.yaml conf/config.yaml           # as env var are not loaded for entries not in config file (bug)
      - run: cp conf/config.test.sample.yaml conf/config.test.yaml # the dbname is specified in conf/config.test.yaml
      - run: make gen-keys
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 30s
      - run:
          name: Seed database
          environment:
            ALGOREA_DATABASE__CONNECTION__USER: root
            ALGOREA_DATABASE__CONNECTION__PASSWD: root
          command: |
            make db-restore
            make db-migrate
      - run:
          name: Prepare for report
          command: |
            mkdir -p test-results
            go get -u github.com/jstemmer/go-junit-report
      - run:
          name: Run tests (make verbosity disabled)
          command: NOECHO=1 make test 2>&1 | go-junit-report > test-results/junit.xml
      - run:
          name: Upload test coverage results to Codecov
          command: bash <(curl -s https://codecov.io/bash)
      - store_test_results: &TESTPATH
          path: test-results
      - store_artifacts: *TESTPATH
      - store_artifacts:
          path: log
      - run:
          when: on_fail
          name: On failure, run BDD tests with details
          command: make test-bdd
  migration-tests:
    docker:
      - image: circleci/golang:1.13
      - image: circleci/mysql:8.0.18
        command: --default-authentication-plugin=mysql_native_password --max-allowed-packet=10485760
        environment:
          MYSQL_USER: franceioi
          MYSQL_PASSWORD: dummy_password
          MYSQL_DATABASE: algorea_example
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ROOT_HOST: "%"
    environment:
      ALGOREA_ENV: test
      ALGOREA_DATABASE__CONNECTION__ADDR: 127.0.0.1
      ALGOREA_DATABASE__CONNECTION__USER: root
      ALGOREA_DATABASE__CONNECTION__PASSWD: root
      ALGOREA_DATABASE__CONNECTION__DBNAME: algorea_example
    steps:
      - attach_workspace:
          at: ./
      - restore_cache: *CACHEKEYMOD
      - run: sudo apt-get update
      - run: sudo apt-get install default-mysql-client             # required for db-restore
      - run: cp conf/config.sample.yaml conf/config.yaml           # as env var are not loaded for entries not in config file (bug)
      - run: cp conf/config.test.sample.yaml conf/config.test.yaml # the dbname is specified in conf/config.test.yaml
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 30s
      - run:
          name: Download a large dump of data
          command: curl -o - $LARGE_DUMP_URL | gunzip > dump.sql
      - run:
          name: Seed database
          command: mysql -h 127.0.0.1 -u root -proot --protocol=TCP algorea_example < dump.sql
      - run:
          name: Apply all migrations
          command: make db-migrate
          no_output_timeout: 1h
      - run:
          name: Undo all migrations
          command: for m in db/migrations/*.sql; do if ! make db-migrate-undo; then break; fi; done
          no_output_timeout: 30m
      - run:
          name: Re-apply all migrations
          command: make db-migrate
          no_output_timeout: 1h
  lint:
    docker:
      - image: circleci/golang:1.13
    steps:
      - attach_workspace:
          at: ./
      - restore_cache: *CACHEKEYMOD
      - run: make lint
  swagger-gen:
    docker:
      - image: quay.io/goswagger/swagger:v0.22.0
    steps:
      - checkout
      - run: go build -v # do not use 'make' as the image does not support '-race' arg
      - run: swagger generate spec --scan-models -o ./swagger.yaml
      - run: swagger validate ./swagger.yaml
      - persist_to_workspace:
          root: ./
          paths:
            - swagger.yaml
  swagger-deploy:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-west-3
    steps:
      - attach_workspace:
          at: ./
      - aws-s3/copy:
          from: swagger.yaml
          to: 's3://franceioi-algorea/spec/swagger.yaml'
          arguments: '--acl public-read'
  dbdoc-gen:
    docker:
      - image: circleci/golang:1.13-browsers
      - image: circleci/mysql:8.0.18
        command: --default-authentication-plugin=mysql_native_password --max-allowed-packet=10485760
        environment:
          MYSQL_USER: algorea
          MYSQL_PASSWORD: dummy_password
          MYSQL_DATABASE: ci_db
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ROOT_HOST: "%"
    environment:
      ALGOREA_ENV: test
      ALGOREA_DATABASE__CONNECTION__ADDR: 127.0.0.1
      ALGOREA_DATABASE__CONNECTION__USER: algorea
      ALGOREA_DATABASE__CONNECTION__PASSWD: dummy_password
      ALGOREA_DATABASE__CONNECTION__DBNAME: ci_db
      DBUSER: algorea
      DBPASS: dummy_password
      DBNAME: ci_db
      DBHOST: 127.0.0.1
    steps:
      - attach_workspace:
          at: ./
      - restore_cache: *CACHEKEYMOD
      - run: sudo apt-get update
      - run: sudo apt-get install default-mysql-client             # required for db-restore
      - run: cp conf/config.sample.yaml conf/config.yaml           # as env var are not loaded for entries not in config file (bug)
      - run: cp conf/config.test.sample.yaml conf/config.test.yaml # the dbname is specified in conf/config.test.yaml
      - run: make gen-keys
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 30s
      - run:
          name: Seed database
          environment:
            ALGOREA_DATABASE__CONNECTION__USER: root
            ALGOREA_DATABASE__CONNECTION__PASSWD: root
          command: |
            make db-restore
            make db-migrate
      - run: sudo apt-get install graphviz # dependency for schemaspy
      - run: make dbdoc
      - store_test_results: &TESTPATH
          path: db/doc
      - persist_to_workspace:
          root: ./
          paths:
            - db/doc
  dbdoc-deploy:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-west-3
    steps:
      - attach_workspace:
          at: ./
      - aws-s3/copy:
          from: db/doc
          to: 's3://franceioi-algorea/dbdoc/'
          arguments: '--acl public-read --recursive'

workflows:
  version: 2
  testing:
    jobs:
      - deps
      - tests:
          requires:
          - deps
      - lint:
          requires:
          - deps
  db-migration-check:
    jobs:
      - deps
      - migration-tests:
          requires:
          - deps
  doc-gen:
    jobs:
      - deps:
          filters:
            branches:
              only: master
      - swagger-gen
      - swagger-deploy:
          requires:
            - swagger-gen
          filters:
            branches:
              only: master
      - dbdoc-gen:
          filters:
            branches:
              only: master
          requires:
          - deps
      - dbdoc-deploy:
          filters:
            branches:
              only: master
          requires:
          - dbdoc-gen
