-- +migrate Up
ALTER TABLE `groups_attempts` ADD COLUMN `iMinusScore` float;
UPDATE `groups_attempts` SET iMinusScore = -iScore;
DROP TRIGGER IF EXISTS `before_insert_groups_attempts`;
-- +migrate StatementBegin
CREATE TRIGGER `before_insert_groups_attempts` BEFORE INSERT ON `groups_attempts` FOR EACH ROW BEGIN IF (NEW.ID IS NULL OR NEW.ID = 0) THEN SET NEW.ID = FLOOR(RAND() * 1000000000) + FLOOR(RAND() * 1000000000) * 1000000000; END IF ; SELECT ROUND(UNIX_TIMESTAMP(CURTIME(2)) * 10) INTO @curVersion;SET NEW.iVersion = @curVersion; SET NEW.iMinusScore = -NEW.iScore; END
-- +migrate StatementEnd
DROP TRIGGER IF EXISTS `before_update_groups_attempts`;
-- +migrate StatementBegin
CREATE TRIGGER `before_update_groups_attempts` BEFORE UPDATE ON `groups_attempts` FOR EACH ROW BEGIN IF NEW.iVersion <> OLD.iVersion THEN SET @curVersion = NEW.iVersion; ELSE SELECT ROUND(UNIX_TIMESTAMP(CURTIME(2)) * 10) INTO @curVersion; END IF; IF NOT (OLD.`ID` = NEW.`ID` AND OLD.`idGroup` <=> NEW.`idGroup` AND OLD.`idItem` <=> NEW.`idItem` AND OLD.`idUserCreator` <=> NEW.`idUserCreator` AND OLD.`iOrder` <=> NEW.`iOrder` AND OLD.`iScore` <=> NEW.`iScore` AND OLD.`iScoreComputed` <=> NEW.`iScoreComputed` AND OLD.`iScoreReeval` <=> NEW.`iScoreReeval` AND OLD.`iScoreDiffManual` <=> NEW.`iScoreDiffManual` AND OLD.`sScoreDiffComment` <=> NEW.`sScoreDiffComment` AND OLD.`nbSubmissionsAttempts` <=> NEW.`nbSubmissionsAttempts` AND OLD.`nbTasksTried` <=> NEW.`nbTasksTried` AND OLD.`nbChildrenValidated` <=> NEW.`nbChildrenValidated` AND OLD.`bValidated` <=> NEW.`bValidated` AND OLD.`bFinished` <=> NEW.`bFinished` AND OLD.`bKeyObtained` <=> NEW.`bKeyObtained` AND OLD.`nbTasksWithHelp` <=> NEW.`nbTasksWithHelp` AND OLD.`sHintsRequested` <=> NEW.`sHintsRequested` AND OLD.`nbHintsCached` <=> NEW.`nbHintsCached` AND OLD.`nbCorrectionsRead` <=> NEW.`nbCorrectionsRead` AND OLD.`iPrecision` <=> NEW.`iPrecision` AND OLD.`iAutonomy` <=> NEW.`iAutonomy` AND OLD.`sStartDate` <=> NEW.`sStartDate` AND OLD.`sValidationDate` <=> NEW.`sValidationDate` AND OLD.`sBestAnswerDate` <=> NEW.`sBestAnswerDate` AND OLD.`sLastAnswerDate` <=> NEW.`sLastAnswerDate` AND OLD.`sThreadStartDate` <=> NEW.`sThreadStartDate` AND OLD.`sLastHintDate` <=> NEW.`sLastHintDate` AND OLD.`sFinishDate` <=> NEW.`sFinishDate` AND OLD.`sContestStartDate` <=> NEW.`sContestStartDate` AND OLD.`bRanked` <=> NEW.`bRanked` AND OLD.`sAllLangProg` <=> NEW.`sAllLangProg`) THEN   SET NEW.iVersion = @curVersion;   UPDATE `history_groups_attempts` SET `iNextVersion` = @curVersion WHERE `ID` = OLD.`ID` AND `iNextVersion` IS NULL;   INSERT INTO `history_groups_attempts` (`ID`,`iVersion`,`idGroup`,`idItem`,`idUserCreator`,`iOrder`,`iScore`,`iScoreComputed`,`iScoreReeval`,`iScoreDiffManual`,`sScoreDiffComment`,`nbSubmissionsAttempts`,`nbTasksTried`,`nbChildrenValidated`,`bValidated`,`bFinished`,`bKeyObtained`,`nbTasksWithHelp`,`sHintsRequested`,`nbHintsCached`,`nbCorrectionsRead`,`iPrecision`,`iAutonomy`,`sStartDate`,`sValidationDate`,`sBestAnswerDate`,`sLastAnswerDate`,`sThreadStartDate`,`sLastHintDate`,`sFinishDate`,`sLastActivityDate`,`sContestStartDate`,`bRanked`,`sAllLangProg`)       VALUES (NEW.`ID`,@curVersion,NEW.`idGroup`,NEW.`idItem`,NEW.`idUserCreator`,NEW.`iOrder`,NEW.`iScore`,NEW.`iScoreComputed`,NEW.`iScoreReeval`,NEW.`iScoreDiffManual`,NEW.`sScoreDiffComment`,NEW.`nbSubmissionsAttempts`,NEW.`nbTasksTried`,NEW.`nbChildrenValidated`,NEW.`bValidated`,NEW.`bFinished`,NEW.`bKeyObtained`,NEW.`nbTasksWithHelp`,NEW.`sHintsRequested`,NEW.`nbHintsCached`,NEW.`nbCorrectionsRead`,NEW.`iPrecision`,NEW.`iAutonomy`,NEW.`sStartDate`,NEW.`sValidationDate`,NEW.`sBestAnswerDate`,NEW.`sLastAnswerDate`,NEW.`sThreadStartDate`,NEW.`sLastHintDate`,NEW.`sFinishDate`,NEW.`sLastActivityDate`,NEW.`sContestStartDate`,NEW.`bRanked`,NEW.`sAllLangProg`) ; SET NEW.iMinusScore = -NEW.iScore; END IF; END
-- +migrate StatementEnd

-- +migrate Down
ALTER TABLE `groups_attempts` DROP COLUMN `iMinusScore`;
DROP TRIGGER IF EXISTS `before_insert_groups_attempts`;
-- +migrate StatementBegin
CREATE TRIGGER `before_insert_groups_attempts` BEFORE INSERT ON `groups_attempts` FOR EACH ROW BEGIN IF (NEW.ID IS NULL OR NEW.ID = 0) THEN SET NEW.ID = FLOOR(RAND() * 1000000000) + FLOOR(RAND() * 1000000000) * 1000000000; END IF ; SELECT ROUND(UNIX_TIMESTAMP(CURTIME(2)) * 10) INTO @curVersion;SET NEW.iVersion = @curVersion; END
-- +migrate StatementEnd
DROP TRIGGER IF EXISTS `before_update_groups_attempts`;
-- +migrate StatementBegin
CREATE TRIGGER `before_update_groups_attempts` BEFORE UPDATE ON `groups_attempts` FOR EACH ROW BEGIN IF NEW.iVersion <> OLD.iVersion THEN SET @curVersion = NEW.iVersion; ELSE SELECT ROUND(UNIX_TIMESTAMP(CURTIME(2)) * 10) INTO @curVersion; END IF; IF NOT (OLD.`ID` = NEW.`ID` AND OLD.`idGroup` <=> NEW.`idGroup` AND OLD.`idItem` <=> NEW.`idItem` AND OLD.`idUserCreator` <=> NEW.`idUserCreator` AND OLD.`iOrder` <=> NEW.`iOrder` AND OLD.`iScore` <=> NEW.`iScore` AND OLD.`iScoreComputed` <=> NEW.`iScoreComputed` AND OLD.`iScoreReeval` <=> NEW.`iScoreReeval` AND OLD.`iScoreDiffManual` <=> NEW.`iScoreDiffManual` AND OLD.`sScoreDiffComment` <=> NEW.`sScoreDiffComment` AND OLD.`nbSubmissionsAttempts` <=> NEW.`nbSubmissionsAttempts` AND OLD.`nbTasksTried` <=> NEW.`nbTasksTried` AND OLD.`nbChildrenValidated` <=> NEW.`nbChildrenValidated` AND OLD.`bValidated` <=> NEW.`bValidated` AND OLD.`bFinished` <=> NEW.`bFinished` AND OLD.`bKeyObtained` <=> NEW.`bKeyObtained` AND OLD.`nbTasksWithHelp` <=> NEW.`nbTasksWithHelp` AND OLD.`sHintsRequested` <=> NEW.`sHintsRequested` AND OLD.`nbHintsCached` <=> NEW.`nbHintsCached` AND OLD.`nbCorrectionsRead` <=> NEW.`nbCorrectionsRead` AND OLD.`iPrecision` <=> NEW.`iPrecision` AND OLD.`iAutonomy` <=> NEW.`iAutonomy` AND OLD.`sStartDate` <=> NEW.`sStartDate` AND OLD.`sValidationDate` <=> NEW.`sValidationDate` AND OLD.`sBestAnswerDate` <=> NEW.`sBestAnswerDate` AND OLD.`sLastAnswerDate` <=> NEW.`sLastAnswerDate` AND OLD.`sThreadStartDate` <=> NEW.`sThreadStartDate` AND OLD.`sLastHintDate` <=> NEW.`sLastHintDate` AND OLD.`sFinishDate` <=> NEW.`sFinishDate` AND OLD.`sContestStartDate` <=> NEW.`sContestStartDate` AND OLD.`bRanked` <=> NEW.`bRanked` AND OLD.`sAllLangProg` <=> NEW.`sAllLangProg`) THEN   SET NEW.iVersion = @curVersion;   UPDATE `history_groups_attempts` SET `iNextVersion` = @curVersion WHERE `ID` = OLD.`ID` AND `iNextVersion` IS NULL;   INSERT INTO `history_groups_attempts` (`ID`,`iVersion`,`idGroup`,`idItem`,`idUserCreator`,`iOrder`,`iScore`,`iScoreComputed`,`iScoreReeval`,`iScoreDiffManual`,`sScoreDiffComment`,`nbSubmissionsAttempts`,`nbTasksTried`,`nbChildrenValidated`,`bValidated`,`bFinished`,`bKeyObtained`,`nbTasksWithHelp`,`sHintsRequested`,`nbHintsCached`,`nbCorrectionsRead`,`iPrecision`,`iAutonomy`,`sStartDate`,`sValidationDate`,`sBestAnswerDate`,`sLastAnswerDate`,`sThreadStartDate`,`sLastHintDate`,`sFinishDate`,`sLastActivityDate`,`sContestStartDate`,`bRanked`,`sAllLangProg`)       VALUES (NEW.`ID`,@curVersion,NEW.`idGroup`,NEW.`idItem`,NEW.`idUserCreator`,NEW.`iOrder`,NEW.`iScore`,NEW.`iScoreComputed`,NEW.`iScoreReeval`,NEW.`iScoreDiffManual`,NEW.`sScoreDiffComment`,NEW.`nbSubmissionsAttempts`,NEW.`nbTasksTried`,NEW.`nbChildrenValidated`,NEW.`bValidated`,NEW.`bFinished`,NEW.`bKeyObtained`,NEW.`nbTasksWithHelp`,NEW.`sHintsRequested`,NEW.`nbHintsCached`,NEW.`nbCorrectionsRead`,NEW.`iPrecision`,NEW.`iAutonomy`,NEW.`sStartDate`,NEW.`sValidationDate`,NEW.`sBestAnswerDate`,NEW.`sLastAnswerDate`,NEW.`sThreadStartDate`,NEW.`sLastHintDate`,NEW.`sFinishDate`,NEW.`sLastActivityDate`,NEW.`sContestStartDate`,NEW.`bRanked`,NEW.`sAllLangProg`) ; END IF; END
-- +migrate StatementEnd

